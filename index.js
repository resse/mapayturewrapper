const scriptData = "data:text/javascript;base64,";
const styleData = "data:text/css;base64,";

function loadDependencies() {
  var scriptElement = document.createElement('script');
  scriptElement.setAttribute('type','text/javascript');
  scriptElement.setAttribute('src',scriptData);
  document.head.appendChild(scriptElement);
  var styleElement = document.createElement('link');
  styleElement.setAttribute('rel','stylesheet');
  styleElement.setAttribute('type','text/css');
  styleElement.setAttribute('href',styleData);
  document.head.appendChild(styleElement);
}

function openWidget(config) {
  return new PaytureWidget({
    Key : "Merchant_Widget",
    Amount : 20,
    Product : "Оплата заказа №1",
    Domain : 2,
    CustomParams :
        {
          TemplateTag : "Default",
          Language : "Default",
          Name : "Иван Иванов",
          Delivery : "Самовывоз"
        },
    ChequeParams :
        {
          Positions:[
            {
              Quantity: 1.000,
              Price: 10.00,
              Tax: 2,
              Text: "Чай"
            },
            {
              Quantity : 2.000,
              Price : 5.00,
              Tax: 2,
              Text: "Пирожок"
            }
          ],
          CustomerContact : "",
          Message: "Чек Payture"
        },
    OnTransactionCompleted : function(success) {
      alert( success );
    }
  });
}

module.exports = {
    loadDependencies,
    openWidget
};